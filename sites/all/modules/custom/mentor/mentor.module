<?php
function mentor_menu() {
  $items['mentor/%/create'] = array(
    'title' => 'Create Mentor',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mentor_form', 1),
    'access callback' => TRUE,
  );
  
  $items['mentor/editprofile'] = array(
    'title' => 'Edit',
    'page callback' => 'mentor_edit',
    //'page arguments' => array('mentor_edit'),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    //'file' => 'user.pages.inc',
  );
  
  $items['mentor/%mentor/edit'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mentor_profile_form', 1),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    //'file' => 'user.pages.inc',
  );
  
  $items['mentor/updateskill'] = array(
    'title' => 'Edit',
    'page callback' => 'mentor_update',
    //'page arguments' => array('mentor_edit'),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    //'file' => 'user.pages.inc',
  );
  
  $items['mentor/%mentor/updateskills'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mentor_profile', 1, 'edit'),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'mentor.pages.inc',
  );
  
  $items['mentor/view'] = array(
    'title' => 'View',
    'page callback' => 'mentor_view',
    //'page arguments' => array('mentor_edit'),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    //'file' => 'user.pages.inc',
  );
 
  $items['mentor/%mentor/view'] = array(
    'title' => 'View',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('mentor_profile', 1, 'view'),
    'access callback' => TRUE,
    //'access arguments' => array(1),
    //'type' => MENU_LOCAL_TASK,
    'file' => 'mentor.pages.inc',
  ); 
  
  $items['firstname/autocomplete'] = array(
      'title' => 'Autocomplete for first name',
      'page callback' => '_firstname_autocomplete',
      //'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
      //'type' => MENU_CALLBACK
      'access callback' => TRUE,
  );
  
  $items['lastname/autocomplete'] = array(
      'title' => 'Autocomplete for last name',
      'page callback' => '_lastname_autocomplete',
      //'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
      //'type' => MENU_CALLBACK
      'access callback' => TRUE,
  );
  
  $items['mentorschool/autocomplete'] = array(
      'title' => 'Autocomplete for mentor school name',
      'page callback' => '_mentorschool_autocomplete',
      //'access arguments' => array('use autocomplete'),  //or whatever permission makes sense
      //'type' => MENU_CALLBACK
      'access callback' => TRUE,
  );
  
  return $items;
}

function _firstname_autocomplete($string) {
  $matches = array();
  $result = db_select('mentor', 'm')
    ->fields('m', array('first_name'))
    ->condition('first_name', '%' . db_like($string) . '%', 'LIKE')
    ->execute();

  
  foreach ($result as $row) {
    $matches[$row->first_name] = check_plain($row->first_name);
  }
  drupal_json_output($matches);
}

function _lastname_autocomplete($string) {
  $matches = array();
  $result = db_select('mentor', 'm')
    ->fields('m', array('last_name'))
    ->condition('last_name', '%' . db_like($string) . '%', 'LIKE')
    ->execute();

  
  foreach ($result as $row) {
    $matches[$row->last_name] = check_plain($row->last_name);
  }
  drupal_json_output($matches);
}

function _mentorschool_autocomplete($string) {
  $matches = array();
  $result = db_select('mentor', 'm')
    ->fields('m', array('last_school_attended'))
    ->fields('m', array('school_attending'))
    ->condition(db_or()->condition('last_school_attended', '%' . db_like($string) . '%', 'LIKE')->condition('school_attending', '%' . db_like($string) . '%', 'LIKE'))
    ->execute();

  
  foreach ($result as $row) {
    $matches[$row->last_school_attended] = check_plain($row->last_school_attended);
    $matches[$row->school_attending] = check_plain($row->school_attending);
  }
  drupal_json_output($matches);
}


function mentor_edit() {
	$uid = $_SESSION['user']->uid;
	drupal_goto('mentor/' . $uid . '/edit');
}

function mentor_update() {
	$uid = $_SESSION['user']->uid;
	drupal_goto('mentor/' . $uid . '/updateskills');
}

function mentor_view() {
	$uid = $_SESSION['user']->uid;
	drupal_goto('mentor/' . $uid . '/view');
}

function mentor_load($uid, $reset = FALSE) {
  $users = mentor_load_multiple(array($uid), array(), $reset);
  return reset($users);
}

function mentor_load_multiple($uids = array(), $conditions = array(), $reset = FALSE) {
  $user = entity_load('user', $uids, $conditions, $reset);
  //$conditions = array('userid'=>$uids);
  //$mentorProfile = db_select('mentor', 'm')
  //	->fields('m')
  //	->condition('userid', $uids,'=')
  //  ->execute()
  //  ->fetchAssoc();
  //drupal_set_message($mentorProfile['id']);
  //$user['first_name'] => $mentorProfile['first_name'];
    
	return $user;
}

function mentor_profile_form($form, &$form_state, $account, $category = 'account') {
  global $user;
  
  $query = db_select('mentor', 'm');   
	//$query->join('specialization_subcategory', 'ssc', 'ssc.scid = m.fos_id'); //JOIN node with users
	$query->condition('m.userid', $account->uid,'=');	   
	$query->fields('m');//SELECT the fields from user	
	   //->fields('ssc');
	$result = $query->execute();
	
	$mentor = array();
	if(	$record = $result->fetchAssoc()) {
		$account->mid = $record['mid'];
    $account->first_name = $record['first_name'];
    $account->last_name = $record['last_name'];
    $account->gender = $record['gender'];
    $account->zipcode = $record['zipcode'];
    $account->mobile = $record['mobile'];
    $account->skype_id = $record['skype_id'];
    $account->state = $record['state'];
    $account->stateUSA = $record['stateUSA'];
    $account->country = (strlen($record['country'])==0)?'USA':$record['country'];
    $account->city = $record['city'];
    $account->cityUSA = $record['cityUSA'];
    $account->birthday = $record['birthday'];
    $account->birthmonth = $record['birthmonth'];
    $account->birthyear = $record['birthyear'];
    $account->mentor_type = $record['mentor_type'];
    $account->employer = $record['employer'];
    $account->title = $record['title'];
    $account->years_of_exp = $record['years_of_exp'];
    $account->linkedInProfile = $record['linked_in_profile'];
    $account->last_school_attended = $record['last_school_attended'];
    $account->fos_id = $record['fos_id'];
    $account->degree_id = $record['degree_id'];
    $account->school_attending = $record['school_attending'];
    $account->year_of_school = $record['year_of_school'];
    //$account->hobbies = $record['hobbies'];
    $account->transfer_highschool = $record['transfer_or_highschool'];
    $account->highSchoolName = $record['highschool'];
    $account->year_of_highschool = $record['year_of_highschool'];
    $account->stateSchool = $record['state_highschool'];
    $account->stateUSASchool = $record['stateUSASchool'];
    $account->countrySchool = (strlen($record['country_highschool'])==0)?'':$record['country_highschool'];
    $account->citySchool = $record['city_highschool'];
    $account->cityUSASchool = $record['cityUSASchool'];
    $account->mentoring_motivation = $record['mentoring_motivation'];
    $account->response_time = $record['response_time'];
    $account->available_time = $record['available_time'];
    $account->about_me = $record['about_me'];
    $account->other_colleges_accepted_at = $record['other_colleges_accepted_at'];
    $account->fb_uname = $record['fb_uname'];
    $account->accept_mentee = $record['accept_mentee'];
    $account->collegeemail = $record['college_email'];
    $account->workemail = $record['work_email'];
    $account->area_of_mentoring = $record['area_of_mentoring'];
    $account->country_others = '';
    $account->engagement_model_with_mentee = $record['engagement_model_with_mentee'];
    $account->volunteer = $record['volunteer'];
    if($account->country != 'USA') {
    	$account->country_others = $record['country'];
    }
	}

  $query = db_select('mentor_specialization', 'ms');
  $query->leftJoin('specialization_subcategory', 'ssc', 'ssc.scid = ms.type'); //JOIN node with users 
	$query->condition('ms.mentor_id', $account->uid,'=');	   
	$query->fields('ms')//SELECT the fields from user	
	   ->fields('ssc');
	$result = $query->execute();	

  $fieldOfStudy = '';
  $fos_ids = array();
  $counterfos = 0;
  foreach ($result as $fos) {
    $fieldOfStudy .= $fos->name . ', ';
    $fos_ids[$counterfos++] = $fos->scid;
  }
  $account->fieldOfStudy = $fieldOfStudy;
  $account->fos_sub_id = $fos_ids;
  $query = db_select('mentor_aom', 'ma');
  $query->join('area_mentoring', 'am', 'am.aid = ma.aom_id'); //JOIN node with users 
	$query->condition('ma.mentor_id', $account->uid,'=');	   
	$query->fields('ma')//SELECT the fields from user	
	   ->fields('am');
	$result = $query->execute();	
 	$areaOfMentoring = '';
	$aom_ids = array();
 	$counteraoi = 0;
  foreach ($result as $aom) {
  	  $areaOfMentoring .= $aom->name . ', ';
  	  $aom_ids[$counteraoi++] =  $aom->aom_id ;
  }
  $account->aom = $areaOfMentoring;
  $account->aom_id = $aom_ids; 
  
  // During initial form build, add the entity to the form state for use during
  // form building and processing. During a rebuild, use what is in the form
  // state.
  if (!isset($form_state['user'])) {
    $form_state['user'] = $account;
  }
  else {
    $account = $form_state['user'];
  }

  // @todo Legacy support. Modules are encouraged to access the entity using
  //   $form_state. Remove in Drupal 8.
  $form['#user'] = $account;
  $form['#user_category'] = $category;

  if ($category == 'account') {
    mentor_edit_form($form, $form_state);
    // Attach field widgets.
    //$langcode = entity_language('user', $account);
    field_attach_form('user', $account, $form, $form_state, 'EN');
  }

  //Displaying first login users from Facebook/LinkedIn to activate their College/Work mail address
  $uid = $account->uid;
  $registration_type = db_query("SELECT registration_type FROM {user_activation} ua WHERE ua.uid = :uid", array(':uid' => $uid))->fetchField();
  $first_login = db_query("SELECT first_login FROM {user_activation} ua WHERE ua.uid = :uid", array(':uid' => $uid))->fetchField();

  if(($registration_type == facebook || $registration_type == linkedin) && ($first_login == 11)){
    drupal_set_message(t("<p style='color:green; margin:0px !important;'>!link_text</p>",
      array(
        '!link_text' => '<strong>Please complete the rest of the form now. We will be sending a Activation link to your Work/College Email Address once you save the form. Kindly activate your account by clicking the link.</strong>',
      )), 'success');
    db_update('user_activation')
      ->fields(array('first_login' => 1))
      ->condition('uid' , $uid , '=')
      ->execute();
  }

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  if ($category == 'account') {
    $form['actions']['cancel'] = array(
      '#type' => 'submit',
      '#value' => t('Cancel account'),
      '#submit' => array('user_edit_cancel_submit'),
      '#access' => $account->uid > 1 && (($account->uid == $user->uid && user_access('cancel account')) || user_access('administer users')),
    );
  }

  $form['#validate'][] = 'mentor_profile_form_validate';
  // Add the final user profile form submit handler.
  $form['#submit'][] = 'mentor_profile_form_submit';

  return $form;
}

function mentor_profile_form_validate($form, &$form_state) {
  
  /*$uid = $_SESSION['user']->uid;
  $query = db_select('users', 'u'); 
  $query->condition('u.uid', $uid, '=');
  $query->fields('u', array('picture'));
  $result = $query->execute();
  $picture = 0;
  if( $record = $result->fetchAssoc()) {
    $picture = $record['picture'];
  }

  if($picture == 46 || $picture == 44){
    form_set_error('pic', t('Profile Picture is Mandatory.'));
  }*/

  $mentor_type = $form_state['values']['mentor_type'];
  $year_of_school_key;
  $year_of_school;
  if($mentor_type == 'student') {
    $year_of_school_key = $form_state['values']['expected_year_of_school'];
    $year_of_school = $form['account']['student']['expected_year_of_school']['#options'][$year_of_school_key];
  } else if($mentor_type == 'professional') {
    $year_of_school_key = $form_state['values']['year_of_school'];
    $year_of_school = $form['account']['professional']['year_of_school']['#options'][$year_of_school_key];      
  }

  $college_email = $form_state['values']['collegeemail'];
  $work_email = $form_state['values']['workemail'];
  if($form_state['values']['mentor_type'] == 'student') {  
    if(!isset($college_email) || empty($college_email) || $college_email == 'College E-mail Address') {
      form_set_error('collegeemail', t('Please provide a valid college email id.'));
    } else if(substr_compare($college_email, '.edu', -4) !== 0) {     
      form_set_error('collegeemail', t('College email id should end with edu.'));
    }

    if($college_email != $form_state['values']['confirm_collegeemail']){
      form_set_error('collegeemail', t('E-mail Address and Confirm E-mail Address does not match'));
      form_set_error('confirm_collegeemail');
    }

    if(!isset($form_state['values']['school_attending'])||$form_state['values']['school_attending'] == 'School Attending' || empty($form_state['values']['school_attending'])){
      form_set_error('schoolAttending', t('School Attending field is required.'));
    }
    if(!isset($year_of_school)|| $year_of_school == 'Year of Graduation' || empty($year_of_school) || $year_of_school == ''){
      form_set_error('expectedYearOfSchool', t('Year Of Graduation field is required.'));
    }
    $form_state['values']['mail'] = $college_email;
    //To unset default values in Work email 
    $form_state['values']['collegeemail'] = $college_email;
    $form_state['values']['workemail'] = $work_email;

  } else if($form_state['values']['mentor_type'] == 'professional') {

    $freeMailServices = file_get_contents("https://skoolmentor.com/sites/default/files/freeMailServices.txt");
    //Work Email address fill check
    if(!isset($work_email) || empty($work_email) || $work_email == 'Work E-mail Address') {
      form_set_error('workemail', t('Please provide a valid work email id.'));
    } else if(preg_match('/("'.$freeMailServices.'")/i', $work_email)){
      form_set_error('workemail', t('Please provide a valid work email id.'));
    }
    /*else if(substr_compare($work_email, 'gmail.com', -9) === 0
      || substr_compare($work_email, 'yahoo.com', -9) === 0
      || substr_compare($work_email, 'hotmail.com', -11) === 0
      || substr_compare($work_email, 'aol.com', -7) === 0) {      
      form_set_error('workemail', t('Please provide a valid work email id.'));
    }*/

    if($work_email != $form_state['values']['confirm_workemail']){
      form_set_error('workemail', t('E-mail Address and Confirm E-mail Address does not match'));
      form_set_error('confirm_workemail');
    }

    if(!isset($form_state['values']['employer']) || $form_state['values']['employer'] == 'Employer' || empty($form_state['values']['employer'])){
      form_set_error('employer', t('Employer field is required.'));
    }
    if(!isset($form_state['values']['title']) || $form_state['values']['title'] == 'Job Title' || empty($form_state['values']['title'])){
      form_set_error('title', t('Job Title field is required.'));
    }
    if(!isset($form_state['values']['years_of_exp']) || $form_state['values']['years_of_exp'] == '' || $form_state['values']['years_of_exp'] == 'Yrs. Of Experience' ){
      form_set_error('years_of_exp', t('Years of Experience field is required.'));
    }
    if(!isset($form_state['values']['last_school_attended']) || $form_state['values']['last_school_attended'] == 'Last School Attended' || empty($form_state['values']['last_school_attended'])){
      form_set_error('lastSchoolAttended', t('Last School Attended field is required.'));
    }
    if(!isset($year_of_school) || empty($year_of_school) || $year_of_school == 'Year of Graduation' || $year_of_school == ''){
      form_set_error('yearOfSchool', t('Year Of Graduation field is required.'));
    }   
    $form_state['values']['mail'] = $work_email;
    //To unset default values in College email 
    $form_state['values']['collegeemail'] = $college_email;
    $form_state['values']['workemail'] = $work_email;
  }

  //$country_value;
  //$country_key = $form_state['values']['country'];
  //if($country_key == "Others")
  //  $country_value = $form_state['values']['country_others'];
  //else
  //  $country_value = $form['account']['country']['#options'][$country_key];
  
    //element_validate_number($form['account']['zipcode'], $form_state);
  $zip_code = $form_state['values']['zipcode'];   
  $phone = $form_state['values']['mobile'];

	$country_value = $form_state['values']['country'];
  if($country_value !== 'Country') {
  //$form_state['values']['country'] = $country_value;
	  
	  if($form_state['values']['country'] == 'Others') {
  		$country_others = $form_state['values']['country_others'];
  		if(!isset($country_others) || empty($country_others) || $country_others == 'Please specify country ') {
  			form_set_error('country_others', t('Country field is required.'));
  			$form_state['values']['country'] = NULL;
  		} else{
			  $form_state['values']['country'] = $country_others;
      }
			$state_others = $form_state['values']['state'];
			if($state_others == NULL || $state_others == '' || $state_others == 'State ') {
				form_set_error('state_others', t('State field is required.'));
				$form_state['values']['state'] = NULL;
			}			
			$form_state['values']['state'] = $state_others;
			
			$city_others = $form_state['values']['city'];
			if(!isset($city_others) || empty($city_others) || $city_others == 'City ') {
				form_set_error('city_others', t('City field is required.'));
				$form_state['values']['city'] = NULL;
			}	
			$form_state['values']['city'] = $city_others;
      //Mobile Number Validation when Country is Others
      if($phone != 'Mobile ' && $phone != NULL) {
        if(!(preg_match('/^\d{10}$/',$phone))){
          //element_validate_number($form['account']['mobile'], $form_state);
          form_set_error('mobile',t('Mobile number must be in the format xxxxxxnnnn'));
        }
      }
      //Zipcode validation when Country is Others
      if($zip_code == 'Zip code *'){    
        form_set_error('zcode',t('Zip code is required'));    
      }else if(strlen($zip_code) != 6 && !preg_match('/^\d{6}$/', $zip_code))  {    
        form_set_error('zcode', t('Zip code should be in nnnnnn format'));    
      }

		} else if($form_state['values']['country'] == 'USA'){
			$form_state['values']['country'] = $form_state['values']['country'];
			$key = $form_state['values']['stateUSA'];
			$state = $form['account']['stateUSA']['#options'][$key];
			if($state =='State *') {
				form_set_error('state', t('State field is required.'));
				$form_state['values']['state'] == NULL;	
			} else	
				$form_state['values']['state'] = $state;
				
			$key = $form_state['values']['cityUSA'];
			$city = $form['account']['cityUSA']['#options'][$key];
			if($city == 'City *') {
				form_set_error('city', t('City field is required.'));
				$form_state['values']['city'] = NULL;
			} else{	
				$form_state['values']['city'] = $city;
      }
      //Mobile Number Validation when Country is USA
      if($phone != 'Mobile ' && $phone != NULL) {
        if(!(preg_match('/\s{0,1}\(\d{3}\)(\s{0,1})\d{3}\-\d{4}$/',$phone))){
          //element_validate_number($form['account']['mobile'], $form_state);
          form_set_error('mobile',t('Mobile number must be in the format (xxx)xxx-nnnn'));
        }
      }
      //Zipcode validation when Country is USA
      if($zip_code == 'Zip code *'){    
        form_set_error('zcode',t('Zip code is required'));    
      }else if(strlen($zip_code) != 5 && !preg_match('/^[0-9]{5}$/', $zip_code))  {   
        form_set_error('zcode', t('Zip code should be in nnnnn format'));   
      }
		}
	} else {
		form_set_error('country', t('Country field is required.'));
		$form_state['values']['country'] == NULL;
		$form_state['values']['state'] == NULL;
		$form_state['values']['city'] == NULL;
	}

  //To validate for High School Country,State and City
  $country_value = $form_state['values']['countrySchool'];
  if($country_value !== 'Country *') {
    $form_state['values']['countrySchool'] = $country_value;
    
    if($form_state['values']['countrySchool'] == 'Others' || $form_state['values']['countrySchool'] == 'Please specify country ') {
        $country_others = $form_state['values']['country_othersSchool'];
        if(!isset($country_others) || empty($country_others) || $country_others == 'Please specify country ') {
          $form_state['values']['countrySchool'] = NULL;
        } else
        $form_state['values']['countrySchool'] = $country_others;
        
      $state_others = $form_state['values']['stateOthersSchool'];
      if($state_others == NULL || $state_others == '' || $state_others == 'State ') {
        $form_state['values']['stateSchool'] = NULL;
      }     
      $form_state['values']['stateSchool'] = $state_others;
      
      $city_others = $form_state['values']['cityOthersSchool'];
      if(!isset($city_others) || empty($city_others) || $city_others == 'City ') {
        $form_state['values']['citySchool'] = NULL;
      } 
      $form_state['values']['citySchool'] = $city_others;

    } else if($form_state['values']['countrySchool'] == 'USA'){
      $key = $form_state['values']['stateUSASchool'];
      $state = $form['account']['stateUSASchool']['#options'][$key];
      if($state =='State') {
        form_set_error('stateUSASchool', t('State field is required.'));
        $form_state['values']['stateSchool'] == NULL; 
      } else  
        $form_state['values']['stateSchool'] = $state;
        
      $key = $form_state['values']['cityUSASchool'];
      $city = $form['account']['cityUSASchool']['#options'][$key];
      if($city == 'City') {
        form_set_error('cityUSASchool', t('City field is required.'));
        $form_state['values']['citySchool'] = NULL; 
      } else{ 
        $form_state['values']['citySchool'] = $city;
      }
    }else{
      $form_state['values']['countrySchool'] == NULL;
      $form_state['values']['stateSchool'] == NULL;
      $form_state['values']['citySchool'] == NULL;
    }
  } else {
    $form_state['values']['countrySchool'] == NULL;
    $form_state['values']['stateSchool'] == NULL;
    $form_state['values']['citySchool'] == NULL;
  }

  //Checking Other Colleges Accepted At field value
  $other_colleges_accepted_at = $form_state['values']['other_colleges_accepted_at'];
  if(isset($other_colleges_accepted_at) && !empty($other_colleges_accepted_at) && $other_colleges_accepted_at != "Other Colleges Accepted At "){
    $form_state['values']['other_colleges_accepted_at'] = check_plain($other_colleges_accepted_at);
  }else{
    $form_state['values']['other_colleges_accepted_at'] = NULL;
  }
  //Checking Facebook Profile Username field value
  $fb_uname = $form_state['values']['fb_uname'];
  if(isset($fb_uname) && !empty($fb_uname) && $fb_uname != "Facebook Profile Username "){
    $form_state['values']['fb_uname'] = check_plain($fb_uname);
  }else{
    $form_state['values']['fb_uname'] = NULL;
  }

  if(isset($form_state['values']['areaofmentoring'])) {
    $selected_aom = array_filter($form_state['values']['areaofmentoring']);
    if(count($selected_aom) < 1){
      form_set_error('areaofmentoring',t('Area of Interest for Mentoring is required'));
    }
  }

  if($form_state['values']['areaofmentoring'][1] == 1){
    $areaOfSpecializationCount = array_filter($form_state['values']['fieldOfSpecialization']);
    //drupal_set_message('<pre>'.print_r($form_state['values'],true).'</pre>');
    if($form_state['values']['fieldOfStudy'] != 9 && $form_state['values']['fieldOfStudy'] != 10){
      if(empty($areaOfSpecializationCount)){
        form_set_error('fieldOfSpecialization', t('Field of Specialization field is required.'));
      }
    }
    if(count($areaOfSpecializationCount) > 3){
      form_set_error('fieldOfSpecialization', t('More than three Fields of Specialization cannot be selected.'));
    }
  }
}

/**
 * Menu callback.
 */
function mentor_page() { 	
  
  return drupal_get_form('mentor_form');
  
}

 function mentor_ajax_callback($form, $form_state) {
    return $form['academic_details']['details']['fieldOfSpecialization'];
}

 function mentor_edit_ajax_callback($form, $form_state) {
    return $form['account']['fieldOfSpecialization'];
}

function mentor_specialization_dropdown_options($key = '') {
   if(empty($key))
		$key = 0;
	$entries = db_query("SELECT scid, name FROM {specialization_subcategory} WHERE specialization_category_id = $key");

  $options = array();
  foreach($entries as $record)
  {
    $options[$record->scid] =$record->name;
  }
  return $options;
}


/*
 * Mentor edit for theme
 */

function theme_mentor_edit_theme_form($variables) {

	//var_dump($variables['form']);
	$output = '<div class="mentor-profile-form-heading1"><div class="mentor-profile-form-heading2">
			View/Edit Profile</div></div>';

	$form = $variables['form'];
	$basic_3 = '<div class="mentor-profile-form-heading3">';
	$basic_4 = '<div class="mentor-profile-form-heading3">';
	$basic_5 = '<div class="mentor-profile-form-heading3">';
	$basic_6 = '<div class="mentor-profile-form-heading3">';
	$basic_7 = '<div class="mentor-profile-form-heading3">';
	$educational = '<div class="mentor-profile-form-heading3">';
	$educational1 = '<div class="mentor-profile-form-heading3">';
  //Adding HighSchool Fields
  $educational2 = '<div class = "register-form-basic">';
	$areaNeedingMentoringIn1 = '<div class="mentor-profile-form-heading3">';
	$areaNeedingMentoringIn2 = '<div class="mentor-profile-form-heading3">';
	//var_dump($form);
	foreach ($form as $key => $element) {
		$allowed_elements = array('textfield', 'textarea', 'radio', 'radios', 'checkbox', 'checkboxes', 'markup', 'submit', 'file', 'fieldset', 'item', 'date', 'select', 'hidden');
		$basic_elements3 = array('first_name', 'last_name', 'gender');
		$basic_elements4 = array('bday');
		$basic_elements5 = array('zipcode', 'mobile', 'skype_id');
		$basic_elements6 = array('pic');
		$basic_elements7 = array('accept_mentee');
		$anmi_elements1 = array('areaofmentoring','fieldOfStudy','fieldOfSpecialization','degree');
		$anmi_elements2 = array('about_me','other_colleges_accepted_at','fb_uname','response_time','available_time','mentoring_motivation','engagement_model_with_mentee','volunteer');
		$educational_elements = array('mentor_type');
		$educational_elements1 = array('country','country_others', 'state', 'stateUSA', 'city','cityUSA');
		$educational_elements2 = array('student','professional');
    $educational_elements3 = array('yearOfHighSchool','countrySchool','country_othersSchool','stateOthersSchool','cityOthersSchool','stateUSASchool','cityUSASchool');
    $educational_elements4 = array('transfer_highschool','highSchoolName');
		
		if (is_array($form[$key]) && isset($element['#type']) ) {
			if(in_array($key, $basic_elements3)){
				$basic_3 .= '<div class="mentor-profile-form-element1" style="display: inline-block !important; margin-left: 1%;"> <div class="mentor-profile-form-element3">'.$element['#title'].'</div>';
				$basic_3 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">';
				$basic_3 .= drupal_render($element);
				$basic_3 .= '</div>';
				$basic_3 .= '</div>';
					
			}if(in_array($key, $basic_elements4)){
				$basic_4 .= '<div class="mentor-profile-form-element3">Date Of Birth</div><div class="mentor-profile-form-element1 container-inline">';
				$basic_4 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">&nbsp;';
				$basic_4 .= drupal_render($element);
				$basic_4 .= '</div>';
				$basic_4 .= '</div>';

			}if(in_array($key, $basic_elements5)){
				$basic_5 .= '<div class="mentor-profile-form-element1" style="display: inline-block !important; margin-left: 1%;"> <div class="mentor-profile-form-element3">'.$element['#title'].'</div>';
				$basic_5 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">';
				$basic_5 .= drupal_render($element);
				$basic_5 .= '</div>';
				$basic_5 .= '</div>';

			}if(in_array($key, $basic_elements6)){
				$basic_6 .= '<div class="mentor-profile-form-element3">Upload an Image</div><div class="mentor-profile-form-element1 container-inline">';
				$basic_6 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">&nbsp;';
				$basic_6 .= drupal_render($element);
				$basic_6 .= '</div>';
				$basic_6 .= '</div>';

			}if(in_array($key, $basic_elements7)){
				$basic_7 .= '<div class="mentor-profile-form-element3"></div><div class="mentor-profile-form-element1 container-inline">';
				$basic_7 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">&nbsp;';
				$basic_7 .= drupal_render($element);
				$basic_7 .= '</div>';
				$basic_7 .= '</div>';

			}
			if(in_array($key, $educational_elements)){
				$educational .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2 container-inline">';
				$educational .= '<div class="mentor-profile-form-element6">&nbsp;';
				$educational .= drupal_render($element);
				$educational .= '<span><div class="tooltip" style="display: inline;font-weight: normal;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
              <span>If you are a recent graduate but are not yet employed, please select your role as \'Student\'.</span></div></span>';
        $educational .= '</div>';
        $educational .= '</div>';
			}
			if(in_array($key, $educational_elements1)){
				if($key == "cityUSA"){
					$educational1 .= '<div id="div_'.$element['#id'].'" class="mentor-profile-form-element1 " style=" margin-left: 1%;"><div class="mentor-profile-form-element3" style="padding-top:1%;">City</div>';
				}else{
					$educational1 .= '<div id="div_'.$element['#id'].'" class="mentor-profile-form-element1 " style=" margin-left: 1%;"><div class="mentor-profile-form-element3" style="padding-top:1%;">'.$element['#title'].'</div>';
				}
				$educational1 .= '<div class="mentor-profile-form-element1 ">';
				$educational1 .= drupal_render($element);
				$educational1 .= '</div>';
				$educational1 .= '</div>';
				/*$educational1 .= '<div class="mentor-profile-form-element1 container-inline">';
				$educational1 .= '<div class="mentor-profile-form-element6">&nbsp;';
				$educational1 .= drupal_render($element);
				$educational1 .= '</div>';
				$educational1 .= '</div>';*/
			}if(in_array($key, $educational_elements2)){
				$educational .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2">';
				$educational .= '<div class="mentor-profile-form-element6">&nbsp;';
				$educational .= drupal_render($element);
				$educational .= '</div>';
				$educational .= '</div>';
			}
      if(in_array($key, $educational_elements3)){
        if($key == 'yearOfHighSchool'){
        $educational2 .=  '<div class="register-form-element-div1 " style="display: inline-block !important; padding-top:2%;margin-left: 1%;min-width: 90%;"><div class = "" style="color: orange;">'.$element['#title'].'</div>';
        $educational2 .= '<div class="register-form-element-div1">';
        }else if($key == 'cityUSASchool'){
          $educational2 .= '<div id="div_'.$element['#id'].'" class="mentor-profile-form-element1 " style=" margin-left: 1%;"><div class="mentor-profile-form-element3" style="padding-top:1%;">City</div>';
          $educational2 .= '<div class="mentor-profile-form-element1 ">';
        }else{
          $educational2 .= '<div id="div_'.$element['#id'].'" class="mentor-profile-form-element1 " style=" margin-left: 1%;"><div class="mentor-profile-form-element3" style="padding-top:1%;">'.$element['#title'].'</div>';
          $educational2 .= '<div class="mentor-profile-form-element1 ">';
          /*if($key == 'cityOthersSchool'){
            $educational2 .= '<div id="div_'.$element['#id'].'" class="register-form-element-div1 container-inline" style="margin-left: 1%;margin-top: 1%">';
            $educational2 .= '<div class="register-form-element-div1">';
          }else{
            $educational2 .= '<div id="div_'.$element['#id'].'" class="register-form-element-div1 container-inline" style="margin-left: 1%;">';
            $educational2 .= '<div class="register-form-element-div1">';
          }*/
        }
        $educational2 .= drupal_render($element);
        $educational2 .= '</div>';
        $educational2 .= '</div>';
      }
      if(in_array($key, $educational_elements4)){
        if($key == 'transfer_highschool'){
          $educational2 .=  '<div class="register-form-element-div1 " style="display: inline-block !important; padding-top:2%;margin-left: 1%;margin-bottom:1%;min-width: 90%;"><div class = "" style="color: orange;">'.$element['#title'].'</div></div>';
          $educational2 .= '<div class="register-form-element-div1 container-inline" style="width: 100%; margin-bottom: 1%;">';
          $educational2 .= '<div class="register-form-element-div1">';
          $educational2 .= drupal_render($element);
          $educational2 .= '</div>';
          $educational2 .= '</div>';
        }else{
          $educational2 .=  '<div class="register-form-element-div1 " style="display: inline-block !important; padding-top:2%;margin-left: 1%;margin-bottom:1%;min-width: 90%;"><div class = "" style="color: orange;">'.$element['#title'].'</div></div>';
          $educational2 .= '<div class="register-form-element-div1 container-inline" style="width: 100%; margin-bottom: 1%;">';
          $educational2 .= '<div class="register-form-element-div1">';
          $educational2 .= drupal_render($element);
          $educational2 .= '<span><div class="tooltip" style="display: inline;font-weight: normal;"><img style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" /><span>High School/Community College Name Format.</br></br>Please enter the FULL name of your High School/Community College. Please do not use abbreviations.<br/><br/>For Example,<br/>Saint Francis High School (Correct)<br/>St Francis High School (Incorrect - Used the abbreviation "St" instead of the full word "Saint")<br/></span></div></span>';
          $educational2 .= '</div>';
          $educational2 .= '</div>';
        }
      }
			if(in_array($key, $anmi_elements1) ){
				$areaNeedingMentoringIn1 .= '<div class="mentor-profile-form-element4" >';
				$areaNeedingMentoringIn1 .= '<div class="mentor-profile-form-element5">&nbsp;';
				$areaNeedingMentoringIn1 .= drupal_render($element);
				$areaNeedingMentoringIn1 .= '</div>';
				$areaNeedingMentoringIn1 .= '</div>';
			}
			if(in_array($key, $anmi_elements2) ){
				if($key == "about_me"){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">A Little More About Me
            <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
            <span>Describe your personality, passions, and accomplishments -- any specifics that would help potential mentees make the decision to work with you as they embark on their College Admissions journey.<br>Eg: The details you mention here could include your GPA, the colleges you got accepted at, financial aid received, involvement in any extra curricular activities, any challenges you overcame, what you love to do and so on.
            </span></div></span></div>';
        }else if($key == "other_colleges_accepted_at"){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">Other Collegs Accepted At
            <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
            <span>List the colleges you got accepted at, other than the one you are currently studying at.<br/>Eg: UC Berkeley, Stanford.</span></div></span></div>';
        }else if($key == "fb_uname"){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">Facebook Profile Username
            <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
            <span>Provide your Facebook profile username, so that Mentees can have a better understanding of you.<br/>Eg: skoolmentorUSA as in https://facebook.com/skoolmentorUSA</span></div></span></div>';
        }else if($key == "response_time"){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">Expected Response Time
            <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
            <span>This provides a rough guideline to your potential mentees of how often to expect a response from you.<br/>Eg: You might be available to respond to queries or setup calls with your mentees everyday or perhaps you are available just once a month.</span></div></span></div>';
        }else if($key == 'available_time'){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">My Typical Available Times During The Week
            <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
            <span>Please mention your typical availability during the week here, so that mentees can try and schedule their meeting times with you around your availability. Feel free to update this as often as you need to.<br/>This should help both you and your mentee to agree on a meeting time quickly. Don\'t forget to mention your timezone ! Here is a sample weekly schedule:<br />
              Monday   : 2 pm-5:30 pm, 9:30pm-whenever (PST)<br />
              Tuesday  : 3 pm-5:30 pm, 9:30pm-whenever (PST)<br />
              Wednesday: 11 pm-1pm, 9:30pm-whenever (PST)<br />
              Thursday : 3 pm-5:30 pm, 9:30pm-whenever (PST)<br />
              Friday   : 1 pm-5:30 pm, 9:30pm-whenever (PST)<br />
              Saturday : Not available<br />
              Sunday   : 1pm-2pm (PST)<br /></span></div></span></div>';
        }else if($key == "engagement_model_with_mentee"){
          $areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;" >Engagement Model With Mentee
              <span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
              <span>Engagement model - specifies the mentorship duration.</br></br>
<ul><li><b>On demand 30 minutes mentoring</b> is a mentoring session for 30 minutes only. It requires no commitment beyond the 30 minutes of mentoring by the mentor or the mentee.</li></br>
<li><b>On demand 1 hour mentoring</b> is a mentoring session for 1 hour only. It requires no commitment beyond the 1 hour of mentoring by the mentor or the mentee.</li></br>
<li><b>3 months</b> - specifies a total mentoring duration of 3 months with the mentee. Within the 3 month period mentors and mentees  meet for approx 1-2 hours per month on a mutually agreed upon frequency and meeting duration to add up to approx 1-2 hours/month. Eg: mentors and mentees can choose to meet once a week for 25-30 minutes for upto 3 months.</li></ul>  </span></div></span></div>';
        }else if($key == 'volunteer'){
					$areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3" style="height: 30px !important;">'.$element['#title'].'
							<span><div class="tooltip" style="display: inline;"><img  style="max-width: 20px; vertical-align: middle;" src="/sites/all/themes/simplecorp/images/question.png" alt="Hint" />
							<span><b>Volunteer</b> - a volunteer mentor is one who is not paid for the mentoring services. Typically we expect some of our mentors who are professionals in the industry to be volunteer mentors though that is purely their choice. </span></div></span></div>';
				}else{
					$areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element1 mentor-profile-form-element2" style="display: inline-block !important; margin-left: 1%; padding-top: 2%;"> <div class="mentor-profile-form-element3">'.$element['#title'].'</div>';
				}
				$areaNeedingMentoringIn2 .= '<div class="mentor-profile-form-element6">';
				$areaNeedingMentoringIn2 .= drupal_render($element);
				$areaNeedingMentoringIn2 .= '</div>';
				$areaNeedingMentoringIn2 .= '</div>';
			}
				
		}
	}
	$basic_3 .= '</div>';
	$basic_4 .= '</div>';
	$basic_5 .= '</div>';
	$basic_6 .= '</div><div class="mentor-profile-form-element7">Allowed Extensions: gif jpg jpeg png</div>';
	$basic_7 .= '</div>';
	$educational .= '</div>';
	$educational1 .= '</div>';
  $educational2 .= '</div>';
	$areaNeedingMentoringIn1 .= '</div>';
	$areaNeedingMentoringIn2 .= '</div>';
	$output .= '<div class = "mentor-profile-form-block-heading1"><div class="mentor-profile-form-block-heading2"><b>Basic Information</b></div>';
	$output .= $basic_3.$basic_4.$basic_5.$basic_7;
	$output .= '</div>';
	$output .= '<div class = "mentor-profile-form-block-heading1">
			<div class="mentor-profile-form-block-heading2"><b>Mentor Type</b></div>';
	$output .= $educational;
	$output .= '<div class = "register-form-edu-heading" style="">
				<div style="color: black;">Current Location</div>'.$educational1.'</div>';
  $output .= '<div class = "register-form-edu-heading" style="">
        <div style="color: black;">High School/Community College Education Information</div>'.$educational2.'</div>';
	$output .= '</div>';
	$output .= '<div class= "mentor-profile-form-block-heading1">
			<div class="mentor-profile-form-block-heading2"><b>Skill Set</b></div>';
	$output .= $areaNeedingMentoringIn1;
	$output .= '</div>';
	$output .= '<div class= "mentor-profile-form-block-heading1">
			<div class="mentor-profile-form-block-heading2"><b></b></div>';
	$output .= $areaNeedingMentoringIn2;
	$output .= '</div>';


	$output .= '<script type="text/javascript">
		(function ($) {
			if(!$("#edit-areaofmentoring-1").is(":checked")){
				$("#edit-fieldofstudy").parent().parent().parent().hide();
				$("#dropdown_specialization_replace_1").parent().parent().hide();
			}
			$("#edit-areaofmentoring-1").change(function(){
				$("#edit-fieldofstudy").parent().parent().parent().toggle();
				$("#dropdown_specialization_replace_1").parent().parent().toggle();
			});
			$("#edit-cityusa").css("max-width","50%");
			$("#edit-country").each(function(){
				$valueCountry = $(this).val();
				if($valueCountry == "USA"){
						$("#div_edit-country-others").hide();
						$("#div_edit-state").hide();
						$("#div_edit-city").hide();
				}else if($valueCountry == "Others"){
						$("#div_edit-stateusa").hide();
						$("#div_edit-cityusa").hide();
				}else{
						$("#div_edit-country-others").hide();
						$("#div_edit-state").hide();
						$("#div_edit-city").hide();
						$("#div_edit-stateusa").hide();
						$("#div_edit-cityusa").hide();
				}
				$(this).change(function(){
					$valueCountry = $(this).val();
					if($valueCountry == "USA"){
						$("#div_edit-country-others").hide();
						$("#div_edit-state").hide();
						$("#div_edit-city").hide();
						$("#div_edit-stateusa").show();
						$("#div_edit-cityusa").show();
					}else if($valueCountry == "Others"){
						$("#div_edit-stateusa").hide();
						$("#div_edit-cityusa").hide();
						$("#div_edit-country-others").show();
						$("#div_edit-state").show();
						$("#div_edit-city").show();
					}else{
						$("#div_edit-country-others").hide();
						$("#div_edit-state").hide();
						$("#div_edit-city").hide();
						$("#div_edit-stateusa").hide();
						$("#div_edit-cityusa").hide();
				}
				});

        $("#edit-countryschool").each(function(){
        $valueCountry1 = $(this).val();
        if($valueCountry1 == "USA"){
            $("#div_edit-country-othersschool").hide();
            $("#div_edit-stateothersschool").hide();
            $("#div_edit-cityothersschool").hide();
        }else if($valueCountry1 == "Others"){
            $("#div_edit-stateusaschool").hide();
            $("#div_edit-cityusaschool").hide();
        }else{
            $("#div_edit-country-othersschool").hide();
            $("#div_edit-stateothersschool").hide();
            $("#div_edit-cityothersschool").hide();
            $("#div_edit-stateusaschool").hide();
            $("#div_edit-cityusaschool").hide();
        }
        $(this).change(function(){
          $valueCountry1 = $(this).val();
          if($valueCountry1 == "USA"){
            $("#div_edit-country-othersschool").hide();
            $("#div_edit-stateothersschool").hide();
            $("#div_edit-cityothersschool").hide();
            $("#div_edit-stateusaschool").show();
            $("#div_edit-cityusaschool").show();
          }else  if($valueCountry1 == "Others"){
            $("#div_edit-stateusaschool").hide();
            $("#div_edit-cityusaschool").hide();
            $("#div_edit-country-othersschool").show();
            $("#div_edit-stateothersschool").show();
            $("#div_edit-cityothersschool").show();
          }else{
            $("#div_edit-country-othersschool").hide();
            $("#div_edit-stateothersschool").hide();
            $("#div_edit-cityothersschool").hide();
            $("#div_edit-stateusaschool").hide();
            $("#div_edit-cityusaschool").hide();
        }
        });
        
      });
				
			});
			$("label").hide();
			$("label").each(function(){
				var textLabel = $(this).text();
				if($(this).attr("for").indexOf("areaofmentoring") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("fieldOfSpecialization") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("fieldofspecialization") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("fieldofstudy") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("edit-m-type") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("edit-degree") > -1){
					$(this).show();
				}else if($(this).attr("for").indexOf("edit-engagement-model-with-mentee") > -1){
					$(this).show();
					if($(this).text().indexOf("Engagement Model With Mentee") < 0){
						$(this).parent().css("float","left");
						$(this).parent().css("min-width","95%");
						$(this).parent().css("margin","0% !important");
					}
				}
				if($(this).attr("for").indexOf("edit-mentor-type") > -1){
					$(this).show();
				}
				if($(this).attr("for").indexOf("edit-accept-mentee") > -1){
					$(this).show();
					$(this).attr("style","font-size: 15px;font-weight: 500;color: orange !important;");
				}
				
				if($(this).parent().parent().parent().attr("id").indexOf("edit-professional") > -1){
						$(this).show();
						$(this).css("margin-left", "2%");
						$(this).css("color","orange")
						$(this).css("font-weight", "normal");
				}
				if($(this).parent().parent().parent().attr("id").indexOf("edit-student") > -1){
						$(this).show();
						$(this).css("margin-left", "2%");
						$(this).css("color","orange")
						$(this).css("font-weight", "normal");
				}
			});
			$("h1").hide();
			$(".description").hide();

			/*$(".form-text").each(function(){
								var titleText = $(this).siblings("label").text();
								if(!$(this).val()){
									$(this).val(titleText) ;
									$(this).css("color","#ABA6A6");
							    }else if($(this).val() == titleText){
									$(this).css("color","#ABA6A6");
							    }
							    $(this).focus(function(){
									if(this.value == titleText) {
							            this.value = "";
							            $(this).css("color","black");
									}
							    });

							    $(this).blur(function(){
							    	if(this.value == "") {
							            this.value = titleText;
							            $(this).css("color","#ABA6A6");
									}
							    });
							});
		$(".form-textarea").each(function(){
								var titleText = $(this).parent().siblings("label").text();
								if(!$(this).val()){
									$(this).val(titleText) ;
									$(this).css("color","#ABA6A6");
							    }else if($(this).val() == titleText){
									$(this).css("color","#ABA6A6");
							    }
								$(this).focus(function(){
									if(this.value == titleText) {
							            this.value = "";
							            $(this).css("color","black");
									}
							    });

							    $(this).blur(function(){
							    	if(this.value == "") {
							            this.value = titleText;
							            $(this).css("color","#ABA6A6");
									}
							    });
							});*/
		})(jQuery);

	</script>';
	return $output;
}

/**
 * Returns form render array.
 */
function mentor_edit_form(&$form, &$form_state) {

   global $user;
   $account = $form['#user'];
   $register = ($form['#user']->uid > 0 ? FALSE : TRUE);

  // Account information.
  $form['account'] = array(
    '#type'   => 'container',    
    //'#attributes' => array('class' => array('container-inline')),
    '#weight' => -10,
  	'#theme' => 'mentor_edit_theme_form',
  );
  
   $form['account']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#maxlength' => 255,
    //'#description' => t('First name of the user.'),
    '#required' => TRUE,
    '#default_value' => (!$register ? $account->first_name : ''),
   	'#size' => 20,
    //'#attributes' => array('class' => array('username')),
    //'#access' => ($register || ($user->uid == $account->uid && user_access('change own username')) || $admin),
    //'#weight' => -10,
  );
  
  $form['account']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),   
    '#maxlength' => 255,
    //'#description' => t('Last name of the user.'),
    '#required' => FALSE,
    '#default_value' => (!$register ? $account->last_name : ''),
  	'#size' => 20,
    //'#access' => ($register || ($user->uid == $account->uid && user_access('change own username')) || $admin),
    //'#weight' => -10,
  );
  
  $form['account']['bday'] = array(
    '#type' => 'date',
    '#title' => t('Date of birth'),
    '#default_value' => array(
      'day' => (!$register ? $account->birthday : ''),
      'month' => (!$register ? $account->birthmonth : ''),
      'year' => (!$register ? $account->birthyear : ''),
    ),
    '#required' => TRUE,
  	'#after_build' => array("format_dob"),
  );
  
  $form['account']['gender'] = array(
    '#title' => t('Gender'),
    '#type' => 'select',
    '#empty_option' => '--Gender--',
    //'#description' => 'Select the gender.',
    '#default_value' => (!$register ? $account->gender : ''),
    '#required' => TRUE,
    '#options' => array(t('M'), t('F')),
  );
  
  $form['account']['zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip code'),
    '#size' => 20,
    //'#description' => t('Zip code of the user.'),
    '#default_value' => (!$register ? $account->zipcode : ''),
    '#required' => TRUE,
  );
  
  $form['account']['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#required' => FALSE,
    '#size' => 20,
  	'#default_value' => (!$register ? $account->mobile : ''),
  );
  
  $form['account']['skype_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Skype Id'),
  	'#size' => 20,
  	'#default_value' => (!$register ? $account->skype_id : ''),
  );
  $form['account']['accept_mentee'] = array(
  		'#type' => 'select',
  		'#title' => t('Currently Accepting New Mentees'),
  		'#options' => array(
  				'1' => t('yes'),
  				'2' => t('no'),
  		),
  		'#default_value' => (!$register ? $account->accept_mentee : '1'),
  );
  
  $form['account']['country'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    '#required' => TRUE,
    //'#empty_option' => '--Country--',
  	'#default_value' => (!$register ? ($account->country != 'USA' ? 'Others' : 'USA') : 'USA'),
  	'#options' => array(
	 				'USA' => t('USA'),
	 				'Others' => t('Others'),
	 		),
  );
  
  $form['account']['country_others'] = array(
    '#type' => 'textfield',
    '#title' => t('Please specify country'),
    '#maxlength' => 255,
    '#required' => FALSE,
    '#default_value' => (!$register ? $account->country_others : ''),
  	'#states' => array(
  			'visible' => array(
  					':input[name="country"]' => array('value' => 'Others'),
  			),
  	),
  	'#size' => '20',
  );
  
  $form['account']['state'] = array(
  		'#type' => 'textfield',
  		'#title' => t('State'),
  		'#required' => FALSE,
  		//'#autocomplete_path' => 'states/autocomplete',
  		//'#name' => 'State',
  		'#size' => '20',
  		'#states' => array(
  				'visible' => array(
  						':input[name="country"]' => array('value' => 'Others'),
  				),
  		),
  		'#default_value' => isset($account->state) ? $account->state : NULL,
  );
  
  $stateDefault = get_states_for_country('1');
  
  $value_state_usa = isset($form_state['values']['stateUSA']) ? $form_state['values']['stateUSA'] : NULL;
  if(isset($account->state) && $value_state_usa == NULL){
  	$value_state_usa = array_search($account->state, $stateDefault);
  }
  $form['account']['stateUSA'] = array(
  		'#type' => 'select',
  		'#title' => t('State'),
  		'#required' => FALSE,
  		'#empty_option' => 'State *',
  		//'#autocomplete_path' => 'states/autocomplete',
  		//'#name' => 'State',
  		//'#size' => '20',
  		'#ajax' => array('event' => 'change',
  				'callback' => 'state_ajax_callback',
  				'progress' => array(
  						'message' => '',
  						'type' => 'throbber',
  				),
  				'wrapper' => 'dropdown_city_replace_1',
  		),
  		'#options' =>$stateDefault,
  		'#states' => array(
  				'visible' => array(
  						':input[name="country"]' => array('value' => 'USA'),
  				),
  		),
  		'#default_value' => $value_state_usa,
  );
  
  $form['account']['city'] = array(
  		'#type' => 'textfield',
  		'#title' => t('City'),
  		'#required' => FALSE,
  		//'#autocomplete_path' => 'cities/autocomplete',
  		//'#name' => 'City',
  		'#size' => '20',
  		'#states' => array(
  				'visible' => array(
  						':input[name="country"]' => array('value' => 'Others'),
  				),
  		),
  		'#default_value' => isset($account->city) ? $account->city : NULL,
  );
  $cityValues = get_city_for_state($value_state_usa);
  $form['account']['cityUSA'] = array(
  		'#type' => 'select',
  		//'#title' => t('City'),
  		'#required' => FALSE,
  		'#empty_option' => 'City *',
  		//'#autocomplete_path' => 'cities/autocomplete',
  		//'#name' => 'City',
  		//'#size' => '20',
      //'#validated' => TRUE,
  		'#prefix' => '<div id="dropdown_city_replace_1">',
  		'#suffix' => '</div>',
  		'#options' => $cityValues,
  		/*'#options' => array(
  		 '1' => t('santa ana'),
  				'2' => t('Santa Ana'),
  		),*/
  		'#states' => array(
  				'visible' => array(
  						':input[name="country"]' => array('value' => 'USA'),
  				),
  		),
  		'#default_value' => isset($account->city) ? array_search($account->city, $cityValues) : NULL,
  );
  
 
  $form['account']['mentor_type'] = array(
    '#type' => 'radios',
    '#required' => TRUE,
    '#options' => array(
      'professional' => t('Professional'),
      'student' => t('Student'),
    ),
    '#default_value' =>  (!$register ? $account->mentor_type : ''),
    '#title' => t('Work Status'),
  );
  
  $form['account']['professional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Professional Information'),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['employer'] = array(
    '#type' => 'textfield',
    '#title' => t('Employer'),
    //'#required' => TRUE,
    '#maxlength' => 255,
    '#size' => 20,
    //'#description' => t('Current Employer'),
    '#default_value' => (!$register ? $account->employer : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Job Title'),
    //'#required' => TRUE,
    '#maxlength' => 255,
    '#size' => 20,
    //'#description' => t('Job Titile'),
    '#default_value' => (!$register ? $account->title : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['years_of_exp'] = array(
    '#title' => t('Yrs. Of Experience'),
    '#type' => 'select',
    '#empty_option' => 'Yrs. Of Experience',
    //'#description' => 'Select the years of experience.',
    '#default_value' => (!$register ? $account->years_of_exp : ''),
    '#options' => drupal_map_assoc(array(t('0'),t('1'), t('2'),t('3'), t('4'),t('5'),t('6'), t('7'),t('8'), t('9'),
    					t('10'),t('11'), t('12'),t('13'), t('14'),t('15'),t('16'), t('17'),t('18'), t('19'),
    					t('20'),t('21'), t('22'),t('23'), t('24'),t('25'),t('26'), t('27'),t('28'), t('29'),
    					t('30'),t('31'), t('32'),t('33'), t('34'),t('35'),t('36'), t('37'),t('38'), t('39'), t('40'))),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['linkedInProfile'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin Profile'),
    '#maxlength' => 255,
    '#size' => 20,
    //'#description' => t('Your Linkedin Profile'),
    '#default_value' => (!$register ? $account->linkedInProfile : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['last_school_attended'] = array(
    '#type' => 'textfield',
    '#title' => t('Last School Attended'),
    //'#required' => TRUE,
    '#maxlength' => 255,
    '#size' => 20,
    //'#description' => t('Last School you Attended'),
    '#default_value' => (!$register ? $account->last_school_attended : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  $form['account']['professional']['year_of_school'] = array(
    '#type' => 'select',
    '#title' => t('Year of Graduation'),
    '#empty_option' => 'Year of Graduation',
    //'#required' => TRUE,
    '#options' => drupal_map_assoc(array(t(date('Y' , strtotime('-35 years'))), t(date('Y' , strtotime('-34 years'))), t(date('Y' , strtotime('-33 years'))), t(date('Y' , strtotime('-32 years'))), t(date('Y' , strtotime('-31 years'))),t(date('Y' , strtotime('-30 years'))), t(date('Y' , strtotime('-29 years'))), t(date('Y' , strtotime('-28 years'))), t(date('Y' , strtotime('-27 years'))), t(date('Y' , strtotime('-26 years'))), t(date('Y' , strtotime('-25 years'))), t(date('Y' , strtotime('-24 years'))), t(date('Y' , strtotime('-23 years'))), 
    					t(date('Y' , strtotime('-22 years'))), t(date('Y' , strtotime('-21 years'))), t(date('Y' , strtotime('-20 years'))), t(date('Y' , strtotime('-19 years'))), t(date('Y' , strtotime('-18 years'))), t(date('Y' , strtotime('-17 years'))), t(date('Y' , strtotime('-16 years'))), t(date('Y' , strtotime('-15 years'))), t(date('Y' , strtotime('-14 years'))), t(date('Y' , strtotime('-13 years'))), t(date('Y' , strtotime('-12 years'))), t(date('Y' , strtotime('-11 years'))), 
    					t(date('Y' , strtotime('-10 years'))), t(date('Y' , strtotime('-9 years'))), t(date('Y' , strtotime('-8 years'))), t(date('Y' , strtotime('-7 years'))), t(date('Y' , strtotime('-6 years'))), t(date('Y' , strtotime('-5 years'))), t(date('Y' , strtotime('-4 years'))), t(date('Y' , strtotime('-3 years'))), t(date('Y' , strtotime('-2 years'))), t(date('Y' , strtotime('-1 years'))), t(date('Y', time())))),    
    '#access' => !($account->role == 'anonymous-user'),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  	'#default_value' => isset($account->year_of_school) ? $account->year_of_school : NULL,
  		
  );
  $form['account']['professional']['workemail'] = array(
		'#type' => 'textfield',
		'#title' => t('Work E-mail Address'),
    //'#required' => TRUE,
    '#maxlength' => 255,
		'#size' => 20,
		'#default_value' => (!$register ? $account->workemail : ''),
		'#states' => array(
				'visible' => array(
						':input[name="mentor_type"]' => array('value' => 'professional'),
				),
		),
  );
  $form['account']['professional']['confirm_workemail'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm Work E-mail Address'),
    //'#required' => TRUE,
    '#maxlength' => 255,
    '#states' => array(
        'visible' => array(
            ':input[name="mentor_type"]' => array('value' => 'professional'),
        ),
    ),
    '#size' => '20',
    '#default_value' => (!$register ? $account->workemail : ''),
  );

  $form['account']['student'] = array(
    '#type' => 'fieldset',
    '#title' => t('Student Information'),
    '#collapsible' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'student'),
      ),
    ),
  );
  
  $form['account']['student']['school_attending'] = array(
    '#type' => 'textfield',
    '#title' => t('School Attending'),
    //'#required' => TRUE,
    '#maxlength' => 255,
    '#size' => 20,
    //'#description' => t('School Attending'),
    '#default_value' => (!$register ? $account->school_attending : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'student'),
      ),
    ),
  );
  $form['account']['student']['expected_year_of_school'] = array(
    '#type' => 'select',
    '#title' => t('Expected Year of Graduation'),
    '#empty_option' => 'Year of Graduation',
  	'#options' => drupal_map_assoc(array(t(date('Y', time())), t(date('Y', strtotime('+1 year'))), t(date('Y', strtotime('+2 years'))), t(date('Y', strtotime('+3 years'))), t(date('Y', strtotime('+4 years'))))),
    '#default_value' => isset($account->year_of_school) ? $account->year_of_school : NULL,
    '#access' => !($account->role == 'anonymous-user'),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'student'),
      ),
    ),
  );
  $form['account']['student']['collegeemail'] = array(
		'#type' => 'textfield',
		'#title' => t('College E-mail Address'),
    '#maxlength' => 255,
    //'#required' => TRUE,
		'#size' => 20,
		'#default_value' => (!$register ? $account->collegeemail : ''),
		'#states' => array(
				'visible' => array(
						':input[name="mentor_type"]' => array('value' => 'student'),
				),
		),
  );
  $form['account']['student']['confirm_collegeemail'] = array(
    '#type' => 'textfield',
    '#title' => t('Confirm College E-mail Address'),
    '#maxlength' => 255,
    //'#required' => TRUE,
    '#states' => array(
        'visible' => array(
            ':input[name="mentor_type"]' => array('value' => 'student'),
        ),
    ),
    '#size' => '20',
    '#default_value' => (!register ? $account->collegeemail : ''),
  );

  //Adding High School Fields -

  $form['account']['transfer_highschool'] = array(
      '#type' => 'select',
      '#title' => t('Are/Were you a Transfer Student?'),
      '#options' => array(
          '1' => t('Yes'),
          '2' => t('No'),
      ),
      '#default_value' => isset($account->transfer_highschool) ? $account->transfer_highschool : 2,
  );

  $form['account']['highSchoolName'] = array(
    '#type' => 'textfield',
    '#title' => t('High School/Community College Name'),
    '#required' => FALSE,
    '#maxlength' => 255,
    '#size' => '20',
    '#default_value' => isset($account->highSchoolName) ? $account->highSchoolName : NULL,
  );
  
  $form['account']['yearOfHighSchool'] = array(
    '#type' => 'select',
    '#title' => t('Year of High School/Community College Graduation'),
    //'#required' => TRUE,
    '#options' => drupal_map_assoc(array(t(date('Y' , strtotime('-35 years'))), t(date('Y' , strtotime('-34 years'))), t(date('Y' , strtotime('-33 years'))), t(date('Y' , strtotime('-32 years'))), t(date('Y' , strtotime('-31 years'))),t(date('Y' , strtotime('-30 years'))), t(date('Y' , strtotime('-29 years'))), t(date('Y' , strtotime('-28 years'))), t(date('Y' , strtotime('-27 years'))), t(date('Y' , strtotime('-26 years'))), t(date('Y' , strtotime('-25 years'))), t(date('Y' , strtotime('-24 years'))), t(date('Y' , strtotime('-23 years'))), t(date('Y' , strtotime('-22 years'))), t(date('Y' , strtotime('-21 years'))), t(date('Y' , strtotime('-20 years'))), t(date('Y' , strtotime('-19 years'))), t(date('Y' , strtotime('-18 years'))), t(date('Y' , strtotime('-17 years'))), t(date('Y' , strtotime('-16 years'))), t(date('Y' , strtotime('-15 years'))), t(date('Y' , strtotime('-14 years'))), t(date('Y' , strtotime('-13 years'))), t(date('Y' , strtotime('-12 years'))), t(date('Y' , strtotime('-11 years'))), t(date('Y' , strtotime('-10 years'))), t(date('Y' , strtotime('-9 years'))), t(date('Y' , strtotime('-8 years'))), t(date('Y' , strtotime('-7 years'))), t(date('Y' , strtotime('-6 years'))), t(date('Y' , strtotime('-5 years'))), t(date('Y' , strtotime('-4 years'))), t(date('Y' , strtotime('-3 years'))), t(date('Y' , strtotime('-2 years'))), t(date('Y' , strtotime('-1 years'))), t(date('Y', time())))),
    '#empty_option' => 'Year of Graduation',
    '#default_value' => isset($account->year_of_highschool) ? $account->year_of_highschool : NULL,
  );

  $form['account']['countrySchool'] = array(
    '#type' => 'select',
    '#title' => t('Country'),
    //'#maxlength' => 255,
    '#empty_option' => 'Country',
    '#required' => FALSE,
    '#options' => array(
          'USA' => t('USA'),
          'Others' => t('Others'),
      ),
    '#default_value' => (!$register ? (($account->countrySchool != 'USA' && $account->countrySchool != 'Others' && $account->countrySchool == NULL)? '' : (($account->countrySchool != 'USA' ? 'Others' : 'USA'))) : $account->countrySchool),//if not register, to handle null values as it is an optional field
  );
  
  $form['account']['country_othersSchool'] = array(
    '#type' => 'textfield',
    '#title' => t('Please specify country'),
    '#maxlength' => 255,
    '#required' => FALSE,
    '#states' => array(
        'visible' => array(
            ':input[name="countrySchool"]' => array('value' => 'Others'),
        ),
    ),
    '#size' => '20',
    '#default_value' => (!$register ? $account->countrySchool : ''),
  );
  
  $form['account']['stateOthersSchool'] = array(
    '#type' => 'textfield',
    '#title' => t('State'),
    '#required' => FALSE,
    //'#autocomplete_path' => 'states/autocomplete',
    //'#name' => 'State',
    '#size' => '20',
    '#states' => array(
        'visible' => array(
            ':input[name="countrySchool"]' => array('value' => 'Others'),
        ),
    ),
    '#default_value' => isset($account->stateSchool) ? $account->stateSchool : NULL,
  );
  $stateDefault = get_states_for_country('1');
  $value_state_usa_school = isset($form_state['values']['stateUSASchool']) ? $form_state['values']['stateUSASchool'] : NULL;
  if(isset($account->stateSchool) && $value_state_usa_school == NULL){
    $value_state_usa_school = array_search($account->stateSchool, $stateDefault);
  }
  $form['account']['stateUSASchool'] = array(
      '#type' => 'select',
      '#title' => t('State of School'),
      '#required' => FALSE,
      '#empty_option' => 'State',
      //'#autocomplete_path' => 'states/autocomplete',
      //'#name' => 'State',
      //'#size' => '20',
      '#ajax' => array('event' => 'change',
                'callback' => 'state_ajax_callback_school',
                'progress' => array(
                'type' => 'throbber',
                  ),
                'wrapper' => 'dropdown_city_replace_2',
              ),
      '#options' =>$stateDefault,
      '#states' => array(
          'visible' => array(
              ':input[name="countrySchool"]' => array('value' => 'USA'),
              ),
          ),
      '#default_value' => $value_state_usa_school,
  );
  
  $form['account']['cityOthersSchool'] = array(
    '#type' => 'textfield',
    '#title' => t('City of School'),
    '#required' => FALSE,
    //'#autocomplete_path' => 'cities/autocomplete',
    //'#name' => 'City',
    '#size' => '20',
    '#states' => array(
        'visible' => array(
            ':input[name="countrySchool"]' => array('value' => 'Others'),
        ),
    ),
    '#default_value' => isset($account->citySchool) ? $account->citySchool : NULL,
  );
  $cityValuesSchool = get_city_for_state($value_state_usa_school);
  $form['account']['cityUSASchool'] = array(
    '#type' => 'select',
    //'#title' => t('City'),
    '#required' => FALSE,
    '#empty_option' => 'City',
    //'#autocomplete_path' => 'cities/autocomplete',
    //'#name' => 'City',
    //'#size' => '20',
    //'#validated' => TRUE,
    '#prefix' => '<div id="dropdown_city_replace_2">',
    '#suffix' => '</div>',
    '#options' => $cityValuesSchool,
    /*'#options' => array(
        '1' => t('santa ana'),
        '2' => t('Santa Ana'),
    ),*/
    '#states' => array(
        'visible' => array(
            ':input[name="countrySchool"]' => array('value' => 'USA'),
            ),
        ),
    '#default_value' => isset($account->citySchool) ? array_search($account->citySchool, $cityValuesSchool) : NULL,
  );

  $entries = db_query("SELECT aid, name FROM {area_mentoring}");
   
  $options = array();
  foreach($entries as $record)
  {
  	$options[$record->aid] =$record->name;
  }
   
  $form['account']['areaofmentoring'] = array(
  		'#title' => t('Area Of Interest For Mentoring'),
  		'#type' => 'checkboxes',
  		//'#description' => 'Select the area you want to be mentored',
  		//'#multiple' => TRUE,
  		'#required' => TRUE,
  		'#options' =>  $options ,
  		'#default_value' => isset($account->aom_id) ? $account->aom_id : NULL,
  );

  $entries = db_query("SELECT cid, name FROM {specialization_category}");

  $options = array();
  foreach($entries as $record)
  {
    $options[$record->cid] =$record->name;
  }  
  
  $value_field_of_study = $account->fos_id; 
  
  $form['account']['fieldOfStudy'] = array(
    '#type' => 'select',
    '#title' => t('Field of Study'),
    //'#description' => t('Field of study.'),
    '#required' => FALSE,
    '#options' => $options,
    '#default_value' => isset($account->fos_id) ? $account->fos_id : key($options),
    '#ajax' => array(
    'event' => 'change',
        'callback' => 'mentor_edit_ajax_callback',
        'progress' => array(
			        		'message' => '',
			        		'type' => 'throbber',
			      			),
        'wrapper' => 'dropdown_specialization_replace_1',
      ),
    '#states' => array(
      'visible' => array(
        ':input[name="areaofmentoring"]' => array('value' => '1'),
      ),
    ),
  );
  
  /*$spec_options = mentor_specialization_dropdown_options($value_field_of_study);
  
  $spec_ids = db_query("SELECT mentor_id, type FROM {mentor_specialization} where mentor_id = " . $account->mid);
   $mentor_specs = array();
  foreach($spec_ids as $record)
  {
    $mentor_specs[$record->type] =$record->type;
  }*/
  $spec_options = isset($form_state['values']['fieldOfStudy']) ? $form_state['values']['fieldOfStudy'] : $value_field_of_study;
  
  $form['account']['fieldOfSpecialization'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Field of Specialization'),
    '#required' => FALSE,
   // '#multiple' => true,
    '#prefix' => '<div id="dropdown_specialization_replace_1">',
    '#suffix' => '</div>',
    '#options' => mentor_specialization_dropdown_options(isset($spec_options) ? $spec_options : 1),
    '#default_value' => isset($account->fos_sub_id) ? $account->fos_sub_id : '',
    '#states' => array(
      'visible' => array(
        ':input[name="areaofmentoring"]' => array('value' => '1'),
      ),
    ),
  );
  
  $entries = db_query("SELECT eid, name FROM {education_qualification}");

  $options = array();
  foreach($entries as $record)
  {
    $options[$record->eid] =$record->name;
  }
  
   $form['account']['degree'] = array(
    '#title' => t('Degree'),
    '#type' => 'select',
    //'#description' => 'Your Qualification',
    '#required' => TRUE,
    '#options' =>  $options ,
    '#default_value' => isset($account->degree_id) ? $account->degree_id : NULL,
  );
  
  $form['account']['about_me'] = array(
    '#type' => 'textarea',
    '#title' => t('About myself'),
    //'#description' => t('Your hobbies'),
    '#default_value' => (!$register ? $account->about_me : ''),
  );

  $form['account']['other_colleges_accepted_at'] = array(
    '#type' => 'textfield',
    '#title' => t('Other Colleges Accepted At'),
    '#required' => FALSE,
    '#maxlength' => 255,
    '#size' => '255',
    '#default_value' => (!$register ? $account->other_colleges_accepted_at : ''),
  );

  $form['account']['fb_uname'] = array(
    '#type' => 'textfield',
    '#title' => t('Facebook Profile Username'),
    '#required' => FALSE,
    '#maxlength' => 255,
    '#size' => '255',
    '#default_value' => (!$register ? $account->fb_uname : ''),
  );

   $form['account']['response_time'] = array(
    '#title' => t('Expected response time'),
    '#type' => 'select',
    '#empty_option' => '--Select--',
    //'#description' => 'Select the expected response time.',
    '#options' => drupal_map_assoc(array(t('Everyday'), t('Once in a week'),t('2 times in a week'), t('3 times in a week'), t('Once in two weeks'), t('Once in a month'))),
   	'#default_value' => isset($account->response_time) ? $account->response_time : NULL,
   		
  );
   $form['account']['available_time'] = array(
    '#type' => 'textarea',
    '#title' => t(''),
    '#default_value' => (!$register ? $account->available_time : ''),
  );

   $form['account']['engagement_model_with_mentee'] = array(
   		'#type' => 'radios',
   		//'#title' => t('Engagement Model With Mentee'),
   		'#required' => TRUE,
   		'#options' => drupal_map_assoc(array(t('On Demand 30 minutes'), t('On Demand 1 hour'), t('3 Month'), t('All of the above'))),
      '#default_value' => isset($account->engagement_model_with_mentee) ? ($account->engagement_model_with_mentee == 'Both' ? t('All of the above') : $account->engagement_model_with_mentee) : t('All of the above'),
   );
  
   $form['account']['volunteer'] = array(
   		'#title' => t('Want To Be A Volunteer Mentor'),
   		'#type' => 'select',
   		'#options' => array(t('No'), t('Yes')),
   		//'#empty_option' => '--Want To Be A Volunteer--',
   		'#default_value' => ($account->volunteer == 1)? 1 : 0,
   		//'#name' => 'Expected response time',
   );
 /* 
  $form['account']['mentoring_motivation'] = array(
    '#type' => 'textarea',
    '#title' => t('What motivates you to be a mentor?'),
    //'#description' => t('Your motivation to be a mentor'),
    '#default_value' => isset($account->mentoring_motivation) ? $account->mentoring_motivation : NULL,
  );
  */
  /*$form['account']['pic'] = array(
  	'#type' => 'managed_file',
  	'#title' => t('Upload an image'),
  	//'#description' => t('Allowed extensions: gif png jpg jpeg'),
  	'#upload_validators' => array(
    	'file_validate_extensions' => array('gif png jpg jpeg'),
    	// Pass the maximum file size in bytes
    	'file_validate_size' => array(1 * 1024 * 1024),
  	),
  	'#theme' => 'mentor_thumb_upload',
  	'#upload_location' => 'public://pictures/',
  );*/

  //$form['submit'] = array(
  //  '#type' => 'submit',
  //  '#value' => 'Register',
  //);
  //$form['#submit'][] = 'mentor_profile_form_submit';
  return $form;
}

function format_dob($form_element, &$form_state){
	// We unset the current values
	unset($form_element['year']['#options']);

	// Now we set the range we want
	$max_age = date('Y') - 50; // 50 years ago
	$min_age = date('Y') - 13; // 7 years ago

	// Now we populate the array
	$form_element['year']['#options'] = array();
	foreach (range($max_age, $min_age) as $year){
		$form_element['year']['#options'][$year] = $year;
	}

	// We return our modified element
	return $form_element;
}

function mentor_profile_form_submit($form, &$form_state) {

  $account = $form['#user'];

  //Check for user roles based on Mentor type - Professional or Student for LinkedIn/Facebook users
  $uid = $account->uid;
  $queryRole = db_select('users_roles', 'ur');
  $queryRole->condition('ur.uid', $uid, '=');
  $queryRole->fields('ur');
  $resultRole = $queryRole->execute();
  foreach($resultRole as $recordRole){
    if($recordRole->rid == '4'){
      if($form_state['values']['mentor_type'] == 'professional'){
        $rid = '9';
      } else if($form_state['values']['mentor_type'] == 'student'){
        $rid = '10';
      }
      //Updating roles in table
      $role_updation = db_update('users_roles')
        ->fields(array(
          'rid' => $rid,
        ))
        ->condition('uid', $uid, '=')
        ->execute();
    }
  }

  $response_time_key = $form_state['values']['response_time'];
  $response_time_value = $form['account']['response_time']['#options'][$response_time_key];
  $selected_aom = array_filter($form_state['values']['areaofmentoring']);
    
  $mentor_type = $form_state['values']['mentor_type'];
  $year_of_school_key;
  $year_of_school;
  if($mentor_type == 'student') {
  	  $year_of_school_key = $form_state['values']['expected_year_of_school'];
  	  $year_of_school = $form['account']['student']['expected_year_of_school']['#options'][$year_of_school_key];
  } else if($mentor_type == 'professional') {
      $year_of_school_key = $form_state['values']['year_of_school'];
      $year_of_school = $form['account']['professional']['year_of_school']['#options'][$year_of_school_key];
  }
  
	$selected_spec = array_filter($form_state['values']['fieldOfSpecialization']);
	//entity_form_submit_build_entity('user', $account, $form, $form_state);
	$specialization = NULL;
	$entries = '';
	$fos = NULL;
	/*$fos = $form_state['values']['fieldOfStudy'];
	if(! empty($selected_spec)) {
		$query = "SELECT name FROM {specialization_subcategory} WHERE scid = ";
		$max = count($selected_spec);
		foreach($selected_spec as $key => $value) {
			$query .= $key;
			if($max > 1) {
				$query .= " or scid = ";
				$max = $max - 1;
			}
		}
		$entries = db_query($query);
	} else {
		$entries = db_query("SELECT name FROM {specialization_subcategory} WHERE specialization_category_id = $fos");
	}
	foreach($entries as $record) {
		$specialization .= $record->name . ', ';
	}
	$specialization = substr($specialization, 0, (strlen($specialization) - 2));
	*/
	$mentoring_area = '';
	if(! empty($selected_aom)) {
		$query = "SELECT name FROM {area_mentoring} WHERE aid = ";
		$max = count($selected_aom);
		foreach($selected_aom as $key => $value) {
			$query .= $key;
			if($max > 1) {
				$query .= " or aid = ";
				$max = $max - 1;
			}
				
		}
		$entries = db_query($query);
		
		
	}
	foreach($entries as $record) {
		$mentoring_area .= $record->name . ', ';
	
	}
	
	$mentoring_area = substr($mentoring_area, 0, (strlen($mentoring_area) - 2));
	//drupal_set_message('<pre>'.print_r($selected_aom,true).'</pre>');
	if(!empty($selected_aom) && isset($selected_aom[1]) && $selected_aom[1] == 1){
		$fos = $form_state['values']['fieldOfStudy'];
		if(! empty($selected_spec)) {
			$query = "SELECT name FROM {specialization_subcategory} WHERE scid = ";
			$max = count($selected_spec);
			foreach($selected_spec as $key => $value) {
				$query .= $key;
				if($max > 1) {
					$query .= " or scid = ";
					$max = $max - 1;
				}
			}
			$entries = db_query($query);
		} else {
			$entries = db_query("SELECT name FROM {specialization_subcategory} WHERE specialization_category_id = $fos");
		}
		foreach($entries as $record) {
			$specialization .= $record->name . ', ';
		}
		$specialization = substr($specialization, 0, (strlen($specialization) - 2));
	}
  //$account->country = $country_value;
  $birthDate = $form_state['values']['bday'];
  $account->mid = $form['#user']->mid;
  $account->first_name = $form_state['values']['first_name'];
  $account->last_name = ($form_state['values']['last_name'] != 'Last name ')?$form_state['values']['last_name']:'';
  $account->birthday = $birthDate['day'];
  $account->birthmonth = $birthDate['month'];
  $account->birthyear = $birthDate['year'];
  $account->gender = $form_state['values']['gender'];
  $account->zipcode = $form_state['values']['zipcode'];
  $account->mobile = $form_state['values']['mobile'];
  $account->skype_id = ($form_state['values']['skype_id'] != 'Skype Id ')?$form_state['values']['skype_id']:'';
  $account->mentor_type = $form_state['values']['mentor_type'];
  $account->userid = $account->uid;
  $account->employer = ($form_state['values']['employer'] != 'Employer')?$form_state['values']['employer']:'';
  $account->title = ($form_state['values']['title'] != 'Job Title')?$form_state['values']['title']:'';
  $account->years_of_exp = ($form_state['values']['years_of_exp'] != 'Yrs. Of Experience')?$form_state['values']['years_of_exp']:'';
  $account->linked_in_profile = ($form_state['values']['linkedInProfile'] !='Linkedin Profile ')?$form_state['values']['linkedInProfile']:'';
  $account->last_school_attended = ($form_state['values']['last_school_attended'] != 'Last School Attended *')?$form_state['values']['last_school_attended']:'';
  $account->fos_id = $fos;
  $account->school_attending = ($form_state['values']['school_attending'] != 'School Attending *')?$form_state['values']['school_attending']:'';
  $account->mentoring_motivation = $form_state['values']['mentoring_motivation'];
  $account->response_time = ($response_time_value != "--Select--")?$response_time_value:'';
  $account->available_time = ($form_state['values']['available_time'] != '')?$form_state['values']['available_time']:'';
  $account->accept_mentee = $form_state['values']['accept_mentee'];
  $account->about_me = ($form_state['values']['about_me'] != '')?$form_state['values']['about_me']:'';
  $account->other_colleges_accepted_at = $form_state['values']['other_colleges_accepted_at'];
  $account->fb_uname = $form_state['values']['fb_uname'];
  $account->year_of_school = $year_of_school;
  $account->degree_id = $form_state['values']['degree'];
  $account->country = $form_state['values']['country'];
	$account->state = $form_state['values']['state'];
	$account->city = $form_state['values']['city'];
	$account->collegeemail = ($form_state['values']['collegeemail'] != 'College E-mail Address ')?$form_state['values']['collegeemail']:'';
	$account->workemail = ($form_state['values']['workemail'] !='Work E-mail Address ')?$form_state['values']['workemail']:'';
  $account->transfer_highschool = $form_state['values']['transfer_highschool'];
  $account->highSchoolName = ($form_state['values']['highSchoolName'] != 'High School Name')?$form_state['values']['highSchoolName']:'';
  $account->year_of_highschool = (empty($form_state['values']['yearOfHighSchool']))?NULL:$form_state['values']['yearOfHighSchool'];
  $account->countrySchool = $form_state['values']['countrySchool'];
  $account->stateSchool = $form_state['values']['stateSchool'];
  $account->citySchool = $form_state['values']['citySchool'];
	$account->engagement_model_with_mentee = $form_state['values']['engagement_model_with_mentee'];
	$account->volunteer = $form_state['values']['volunteer'];
	$account->specialization = $specialization;
	$account->area_of_mentoring = $mentoring_area;
	
	//drupal_set_message('<pre>'.print_r($account,true).'</pre>');
	$success = db_update('mentor') // Table name no longer needs {}
	->fields(array(
			'mid' => $form['#user']->mid,
			'first_name' => $form_state['values']['first_name'],
			'last_name' => ($form_state['values']['last_name'] != 'Last name ')?$form_state['values']['last_name']:'',
			'birthday' => $birthDate['day'],
			'birthmonth' => $birthDate['month'],
			'birthyear' => $birthDate['year'],
			'gender' => $form_state['values']['gender'],
			'country' => $form_state['values']['country'],
			'state' => $form_state['values']['state'],
			'city' => $form_state['values']['city'],
			'zipcode' => $form_state['values']['zipcode'],
			'mobile' => $form_state['values']['mobile'],
			'skype_id' => ($form_state['values']['skype_id'] != 'Skype Id ')?$form_state['values']['skype_id']:'',
			'userid' => $account->uid,
			'employer' => ($form_state['values']['employer'] != 'Employer ')?$form_state['values']['employer']:'',
			'title' => ($form_state['values']['title'] != 'Job Title ')?$form_state['values']['title']:'',
			'years_of_exp' => ($form_state['values']['years_of_exp'] != 'Yrs. Of Experience')?$form_state['values']['years_of_exp']:'',
			'linked_in_profile' => ($form_state['values']['linkedInProfile'] !='Linkedin Profile ')?$form_state['values']['linkedInProfile']:'',
			'last_school_attended' => ($form_state['values']['last_school_attended'] != 'Last School Attended ')?$form_state['values']['last_school_attended']:'',
			'school_attending' => ($form_state['values']['school_attending'] != 'School Attending ')?$form_state['values']['school_attending']:'',
			'year_of_school' => $year_of_school,
      'transfer_or_highschool' => $account->transfer_highschool,
      'highschool' => $account->highSchoolName,
      'year_of_highschool' => $account->year_of_highschool,
      'country_highschool' => $account->countrySchool,
      'state_highschool' => $account->stateSchool,
      'city_highschool' => $account->citySchool,
			'about_me' => ($form_state['values']['about_me'] != 'About myself & What motivates you to be a mentor? ')?$form_state['values']['about_me']:'',
      'other_colleges_accepted_at' => $form_state['values']['other_colleges_accepted_at'],
      'fb_uname' => $form_state['values']['fb_uname'],
			'response_time' => ($response_time_value != "--Select--")?$response_time_value:'',
      'available_time' => $form_state['values']['available_time'],
			//'hobbies' => $general_details['hobby'],
			'mentoring_motivation' => $form_state['values']['mentoring_motivation'],
			'accept_mentee' => $form_state['values']['accept_mentee'],
			'fos_id' => $fos,
			//'fos_sub_id' => $academic_details['fieldOfSpecialization'],
			'degree_id' => $form_state['values']['degree'],
			'mentor_type' => $form_state['values']['mentor_type'],
			'specialization'=> $specialization,
			'area_of_mentoring'=>$mentoring_area,
			'college_email' => ($form_state['values']['collegeemail'] != 'College E-mail Address ')?$form_state['values']['collegeemail']:'',
			'work_email' => ($form_state['values']['workemail'] !='Work E-mail Address ')?$form_state['values']['workemail']:'',
			'engagement_model_with_mentee' => $form_state['values']['engagement_model_with_mentee'],
			
				'volunteer' => $form_state['values']['volunteer'],
		))
	->condition('mid', $form['#user']->mid, '=')
	->execute();
    //$success = drupal_write_record('mentor', $account, 'mid');
      if ($success === FALSE) {
        // The query failed - better to abort the save than risk further
        // data loss.
        return FALSE;
      }
     
     $uid = $_SESSION['user']->uid; 
    db_delete('mentor_specialization')
	  ->condition('mentor_id', $uid)
	  ->execute();
				
	foreach($selected_spec as $key => $value) {
		db_insert('mentor_specialization')
			->fields(array(
				'mentor_id' => $uid,
				'type' => $key,
		))
		->execute();			
	}
	
	db_delete('mentor_aom')
	  ->condition('mentor_id', $uid)
	  ->execute();
	  
	 foreach($selected_aom as $key => $value) {
		db_insert('mentor_aom')
			->fields(array(
				'mentor_id' => $uid,
				'aom_id' => $key,
		))
		->execute();			
	}
	//drupal_set_message($account->uid);
	$uid = $account->uid;
	
	$query = db_select('users', 'u'); 
		$query->condition('u.uid', $uid, '=');
		$query->fields('u', array('picture'));
		$result = $query->execute();
		$picture = 0;
		if(	$record = $result->fetchAssoc()) {
			//drupal_set_message('<pre>'.print_r($record,true).'</pre>');
			$picture = $record['picture'];
		}
		
		$account = array();
		$account['uid'] = $uid;
		$account['status'] = 1;
		if($picture == 0) {
			if($form_state['values']['gender'] == 0) {
				$account['picture'] = 46;
			} else {
				$account['picture'] = 44;
			}
		}
		$success = drupal_write_record('users', $account, 'uid');
		  // Clear the page cache because pages can contain usernames and/or profile information:
  cache_clear_all();

  drupal_set_message(t('The changes have been saved.'));

  //To change activation value for Facebook/LinkedIn users for first time
  $activation_code = db_query("SELECT activation_code FROM {user_activation} ua WHERE ua.uid = :uid", array(':uid' => $uid))->fetchField();
  $registration_type = db_query("SELECT registration_type FROM {user_activation} ua WHERE ua.uid = :uid", array(':uid' => $uid))->fetchField();
  $first_login = db_query("SELECT first_login FROM {user_activation} ua WHERE ua.uid = :uid", array(':uid' => $uid))->fetchField();
  if(($registration_type == 'facebook' || $registration_type == 'linkedin') && $first_login == 1){
    db_update('user_activation')
      ->fields(array('activated' => 'N' ,
                      'first_login' => 0))
      ->condition('uid' , $uid , '=')
      ->execute();
    $values['sender'] = $form['#user'];
    $values['sender']->name = $values['name'];
    $values['sender']->mail = 'administer@skoolmentor.com';
    $values['activation_code'] = $activation_code;
    $values['mail'] = ($form_state['values']['collegeemail'])?$form_state['values']['collegeemail']:$form_state['values']['workemail'];
    drupal_mail('mentoringcommon', 'user_activation_mail', $values['mail'], language_default(), $values, $values['sender']->mail);   
    drupal_goto('user/logout');
  }
}

function mentor_get_header($form, &$form_state) {
   
  $form_state['stage'] = isset($form_state['stage']) ? $form_state['stage'] : 1;  
     
  $form_stages = array(
    'basic_info' => 1,
    'mentor_type' => 2,
    'academic_details' => 3,
    'general_details' => 4,
  ); 
     
  if (isset($form_stages[$form_state['stage']])) {
   $current_step = $form_stages[$form_state['stage']]; 
  }
  else {
   $current_step = 1;
  }
   
  $stages = array(
    1 => array('data' => '1. Basic Information'),
    2 => array('data' => '2. Mentor Type'),
    3 => array('data' => '3. Academic Details'),
    4 => array('data' => '4. Generic Details'),
  );
   
  //$stages[$current_step]['class'] = array('active');
   
  $stages_list = theme('item_list', array('items' => $stages));
   
  $form['header'] = array(
    '#type' => 'fieldset',
    '#title' => '',
    '#value' => $stages_list,
  );
 
  return $form;
   
}


function mentor_move_to_next_stage($form, &$form_state) {
 
  switch ($form_state['stage']) {
    case 'basic_info':
      return 'mentor_type';
     break;
 
    case 'mentor_type':
      return 'academic_details';
     break;
     
    case 'academic_details':
      return 'general_details';
     break;  
  }
 
}
 
function mentor_move_to_previous_stage($form, &$form_state) {
 
  switch ($form_state['stage']) {
    case 'mentor_type':
      return 'basic_info';
     break;
 
    case 'academic_details':
      return 'mentor_type';
     break;
     
    case 'general_details':
      return 'academic_details';
     break; 
  }
     
}

function mentor_view_profile_form(&$form, &$form_state) {

   global $user;
   $account = $form['#user'];
   $register = ($form['#user']->uid > 0 ? FALSE : TRUE);

  
	// Account information.
  $form['account'] = array(
    '#type'   => 'container',    
    //'#attributes' => array('class' => array('container-inline')),
    '#weight' => -10,
  );
  
  $form['#attached']['css'] = array(
    drupal_get_path('module', 'mentor') . '/mentor.css',
  );
 
   $form['account']['first_name'] = array(
    '#type' => 'textfield',
    '#title' => t('First Name'),
    '#maxlength' => 255,
    //'#description' => t('First name of the user.'),
    '#required' => TRUE,
    '#default_value' => (!$register ? $account->first_name : ''),
    //'#attributes' => array('class' => array('username')),
    //'#access' => ($register || ($user->uid == $account->uid && user_access('change own username')) || $admin),
    //'#weight' => -10,
  );
  
  $form['account']['last_name'] = array(
    '#type' => 'textfield',
    '#title' => t('Last name'),   
    '#maxlength' => 255,
    //'#description' => t('Last name of the user.'),
    '#required' => FALSE,
    '#default_value' => (!$register ? $account->last_name : ''),
  );
  
  $form['account']['bday'] = array(
    '#type' => 'date',
    '#title' => t('Date of birth'),
    //'#description' => t('Birth day of the user.'),
    '#required' => TRUE,
  );
  
  $form['account']['gender'] = array(
    '#title' => t('Gender'),
    '#type' => 'select',
    //'#description' => 'Select the gender.',
    '#default_value' => (!$register ? $account->gender : ''),
    '#required' => TRUE,
    '#options' => array(t('M'), t('F')),
  );
  
  $form['account']['zipcode'] = array(
    '#type' => 'textfield',
    '#title' => t('Zip code'),
    //'#description' => t('Zip code of the user.'),
    '#default_value' => (!$register ? $account->zipcode : ''),
    '#required' => TRUE,
  );
  
  $form['account']['mobile'] = array(
    '#type' => 'textfield',
    '#title' => t('Mobile'),
    '#default_value' => (!$register ? $account->mobile : ''),
  );
  
  $form['account']['skype_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Skype Id'),
    '#default_value' => (!$register ? $account->skype_id : ''),
  );
 
  $form['account']['mentor_type'] = array(
    '#type' => 'radios',
    '#options' => array(
      'professional' => t('Professional'),
      'student' => t('Student'),
    ),
    '#default_value' =>  (!$register ? $account->mentor_type : ''),
    '#title' => t('Work Status'),
  );
  
  $form['account']['professional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Professional Information'),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['employer'] = array(
    '#type' => 'textfield',
    '#title' => t('Employer'),
    '#maxlength' => 255,
    //'#description' => t('Current Employer'),
    //'#default_value' => (!$register ? $account->employer : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Job Title'),
    '#maxlength' => 255,
    //'#description' => t('Job Titile'),
    '#default_value' => (!$register ? $account->title : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['years_of_exp'] = array(
    '#title' => t('Yrs. Of Experience'),
    '#type' => 'select',
    //'#description' => 'Select the years of experience.',
    '#default_value' => (!$register ? $account->years_of_exp : ''),
    '#options' => array(t('1'), t('2'),t('3'), t('4')),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['linkedInProfile'] = array(
    '#type' => 'textfield',
    '#title' => t('Linkedin Profile'),
    '#maxlength' => 255,
    //'#description' => t('Your Linkedin Profile'),
    '#default_value' => (!$register ? $account->linkedInProfile : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['professional']['last_school_attended'] = array(
    '#type' => 'textfield',
    '#title' => t('Last School Attended'),
    '#maxlength' => 255,
    //'#description' => t('Last School you Attended'),
    '#default_value' => (!$register ? $account->last_school_attended : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'professional'),
      ),
    ),
  );
  
  $form['account']['student'] = array(
    '#type' => 'fieldset',
    '#title' => t('Student Information'),
    '#collapsible' => TRUE,
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'student'),
      ),
    ),
  );
  
  $form['account']['student']['school_attending'] = array(
    '#type' => 'textfield',
    '#title' => t('School Attending'),
    '#maxlength' => 255,
    //'#description' => t('School Attending'),
    '#default_value' => (!$register ? $account->school_attending : ''),
    '#states' => array(
      'visible' => array(
        ':input[name="mentor_type"]' => array('value' => 'student'),
      ),
    ),
  );
  
  $form['account']['mentoring_motivation'] = array(
    '#type' => 'textarea',
    '#title' => t('What motivates you to be a mentor?'),
    //'#description' => t('Your motivation to be a mentor'),
    '#default_value' => (!$register ? $account->mentoring_motivation : ''),
  );
  
  /*$form['account']['hobbies'] = array(
    '#type' => 'textarea',
    '#title' => t('Hobbies'),
    //'#description' => t('Your hobbies'),
    '#default_value' => (!$register ? $account->hobbies : ''),
  );*/
  
  $form['account']['pic'] = array(
  	'#type' => 'managed_file',
  	'#title' => t('Profile Picture'),
  	//'#description' => t('Allowed extensions: gif png jpg jpeg'),
  	'#upload_validators' => array(
    	'file_validate_extensions' => array('gif png jpg jpeg'),
    	// Pass the maximum file size in bytes
    	'file_validate_size' => array(1 * 1024 * 1024),
  	),
    '#required' => TRUE,
  	'#theme' => 'mentor_thumb_upload',
  	'#upload_location' => 'public://pictures/',
  );

  //$form['submit'] = array(
  //  '#type' => 'submit',
  //  '#value' => 'Register',
  //);
  //$form['#submit'][] = 'mentor_profile_form_submit';
  return $form;
	
}

/**
 * Implementation of hook_views_data().
 */
function mentor_views_data() {
  $data = array(
    // uc_recurring_users table
    'mentor' => array(
      // Define the table information.
      'table' => array(
        // Put all of these in a group in the UI.
        'group' => 'Mentor',
        // Declare this as a base table.
        'base' => array(
          // The primary key.
          'field' => 'mid',
          // UI title to choose from.
          'title' => t('Mentor'),
          'help' => t('Mentor specific information.'),
        ),
        // Define how this links up with other tables.
        'join' => array(
          // The core Users table is handy.
          'users' => array(
        	'left table' => 'users',
            'left_field' => 'uid',
            'field' => 'mid',
          ),
        ),
      ),
      ///// Define the fields. /////
      'mid' => array(
        // The title that appears in the UI.
        'title' => t('User ID'),
        // The help that appears in the UI.
        'help' => t('User ID for a mentor.'),
        // Information for displaying the field.
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'relationship' => array(
          'handler' => 'views_handler_relationship',
          'base' => 'users',
          'base field' => 'uid',
        ),
      ),
      'first_name' => array(
        // The title that appears in the UI.
        'title' => t('First Name'),
        // The help that appears in the UI.
        'help' => t('First name of the mentor'),
        // Information for displaying the field.
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
      ),
      'last_name' => array(
        'title' => t('Last Name'),
        'help' => t('Last name of the mentor'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
      ),
      'state' => array(
        'title' => t('State'),
        'help' => t('State of the mentor'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
      ),
      'city' => array(
        'title' => t('City'),
        'help' => t('City of the mentor'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
      ),
      'years_of_exp' => array(
        'title' => t('Year Of Experience'),
        'help' => t('Mentor\'s work experience'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),
      'specialization' => array(
        'title' => t('Fields of Specialization'),
        'help' => t('Mentor\'s specialization'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),
      'employer' => array(
        'title' => t('Employer'),
        'help' => t('Employer of mentor'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),
      'school_attending' => array(
        'title' => t('School Attending'),
        'help' => t('School that mentor currently attending'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),
      'last_school_attended' => array(
        'title' => t('Last School Attended'),
        'help' => t('Last shool attended by mentor'),
        'field' => array(
          'handler' => 'views_handler_field',
          'click sortable' => TRUE,
        ),
        'sort' => array(
          'handler' => 'views_handler_sort',
        ),
      ),
    ), // End of uc_recurring_users table.
  );

  return $data;
}
function mentor_theme($existing, $type, $theme, $path) {
	return array(
			'mentor_edit_theme_form' => array(
					'render element' => 'form',
				),
	);
}

function mentor_fields_load($mid) {
 	
    $query = db_select('mentor', 'm');   
	//$query->join('specialization_subcategory', 'ssc', 'ssc.id = m.fos_id'); //JOIN node with users
	$query->condition('m.mid', $mid,'=');	   
	$query->fields('m');
	$result = $query->execute();
	
	$account = new stdClass();
	if(	$record = $result->fetchAssoc()) {
		$account->mid = $record['mid'];
	    $account->first_name = $record['first_name'];
	    $account->last_name = $record['last_name'];
	    $account->gender = $record['gender'];
	    $account->zipcode = $record['zipcode'];
	    $account->mentor_type = $record['mentor_type'];
	    $account->title = $record['title'];
	    $account->years_of_exp = $record['years_of_exp'];
	    $account->linkedInProfile = $record['linked_in_profile'];
	    $account->last_school_attended = $record['last_school_attended'];
	    //$account->hobbies = $record['hobbies'];
	    $account->mentoring_motivation = $record['mentoring_motivation'];
	    $account->fos_id = $record['fos_id'];
		//$account->fos_sub_id = $record['fos_sub_id'];
		$account->degree_id = $record['degree_id'];
	    $account->school_attending = $record['school_attending'];
	}
	return $account;
}
